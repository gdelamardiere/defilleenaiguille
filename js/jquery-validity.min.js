(function(a) {
    a.fn.validateOnBlur = function(c, b) {
        this.find("input[data-validation], textarea[data-validation]").blur(function() {
            a(this).validateInputOnBlur(c, b)
        });
        return this
    };
    a.fn.showHelpOnFocus = function(b) {
        if (!b) {
            b = "data-validation-help"
        }
        this.find("textarea,input").each(function() {
            var c = a(this), e = "jquery_form_help_" + c.attr("name"), d = c.attr(b);
            if (d) {
                c.focus(function() {
                    var f = c.parent().find("." + e);
                    if (f.length == 0) {
                        f = a("<span />").addClass(e).addClass("help-block").text(d).hide();
                        c.after(f)
                    }
                    f.fadeIn()
                }).blur(function() {
                    a(this).parent().find("." + e).fadeOut("slow")
                })
            }
        });
        return this
    };
    a.fn.validateInputOnBlur = function(f, b, h, g) {
        if (h === undefined) {
            h = true
        }
        if (!g) {
            g = "blur"
        }
        f = a.extend(a.formUtils.LANG, f || {});
        b = a.extend(a.formUtils.defaultConfig(), b || {});
        b.errorMessagePosition = "element";
        var j = this, d = document.getElementById(j.attr("name") + "_err_msg"), k = j.closest("form"), i = j.attr(b.validationRuleAttribute);
        j.removeClass(b.errorElementClass).css("border-color", "").parent().find("." + b.errorMessageClass).remove();
        k.find(".has-error").removeClass("has-error");
        j.removeClass("valid").parent().removeClass("has-success");
        if (d != null) {
            d.innerHTML = ""
        }
        var c = a.formUtils.validateInput(j, f, b, k, g);
        if (c === true) {
            j.addClass("valid").parent().addClass("has-success")
        } else {
            if (c === null) {
                j.removeClass("valid").parent().removeClass("has-error").removeClass("has-success")
            } else {
                j.addClass(b.errorElementClass).removeClass("valid").parent().addClass("has-error").removeClass("has-success");
                if (d != null) {
                    d.innerHTML = c
                } else {
                    if (document.getElementById(j.attr("name") + "_block_message")) {
                        a("#" + j.attr("name") + "_block_message").html('<span class="' + b.errorMessageClass + ' help-block">' + c + "</span>");
                        a("#" + j.attr("name") + "_block_message").addClass("has-error")
                    } else {
                        var e = j.parent();
                        e.append('<span class="' + b.errorMessageClass + ' help-block">' + c + "</span>");
                        e.addClass("has-error")
                    }
                }
                if (b.borderColorOnError !== "") {
                    j.css("border-color", b.borderColorOnError)
                }
                if (h) {
                    j.bind("keyup", function() {
                        a(this).validateInputOnBlur(f, b, false, "keyup")
                    })
                }
            }
        }
        return this
    };
    a.fn.valAttr = function(b, c) {
        if (c === undefined) {
            return this.attr("data-validation-" + b)
        } else {
            if (c === false || c === null) {
                return this.removeAttr("data-validation-" + b)
            } else {
                if (b.length > 0) {
                    b = "-" + b
                }
                return this.attr("data-validation" + b, c)
            }
        }
    };
    a.fn.validateForm = function(g, b) {
        g = a.extend(a.formUtils.LANG, g || {});
        b = a.extend(a.formUtils.defaultConfig(), b || {});
        a.formUtils.isValidatingEntireForm = true;
        a.formUtils.haltValidation = false;
        var c = function(l, k) {
            if (l !== null) {
                if (a.inArray(l, i) < 0) {
                    i.push(l)
                }
                e.push(k);
                k.valAttr("current-error", l).removeClass("valid").parent().removeClass("has-success")
            }
        }, i = [], e = [], j = this, h = function(k, l) {
            if (l === "submit" || l === "button") {
                return true
            }
            return a.inArray(k, b.ignore || []) > -1
        };
        j.find("input,textarea,select").filter(':not([type="submit"],[type="button"])').each(function() {
            var k = a(this);
            var m = k.attr("type");
            if (!h(k.attr("name"), m)) {
                var l = a.formUtils.validateInput(k, g, b, j, "submit");
                if (l !== true) {
                    c(l, k)
                } else {
                    k.valAttr("current-error", false).addClass("valid").parent().addClass("has-success")
                }
            }
        });
        j.find(".has-error").removeClass("has-error");
        j.find("input,textarea,select").css("border-color", "").removeClass(b.errorElementClass);
        a("." + a.split(b.errorMessageClass, " ").join(".")).remove();
        a("." + b.errorMessageClass).remove();
        if (typeof b.onValidate == "function") {
            var d = b.onValidate(j);
            if (d && d.element && d.message) {
                c(d.message, d.element)
            }
        }
        if (!a.formUtils.haltValidation && e.length > 0) {
            a.formUtils.isValidatingEntireForm = false;
            a.each(e, function(k, l) {
                if (b.borderColorOnError !== "") {
                    l.css("border-color", b.borderColorOnError)
                }
                l.addClass(b.errorElementClass).parent().addClass("has-error")
            });
            if (b.errorMessagePosition === "top") {
                var f = "<strong>" + g.errorTitle + "</strong>";
                a.each(i, function(k, l) {
                    f += "<br />* " + l
                });
                j.children().eq(0).before('<div class="' + b.errorMessageClass + ' alert alert-danger">' + f + "</div>");
                if (b.scrollToTopOnError) {
                    a(window).scrollTop(j.offset().top - 20)
                }
            } else {
                a.each(e, function(l, n) {
                    var m = n.parent(), k = m.find("span[class=" + b.errorMessageClass + "]");
                    if (k.length > 0) {
                        k.text(", " + n.valAttr("current-error"))
                    } else {
                        if (document.getElementById(n.attr("name") + "_block_message")) {
                            a("#" + n.attr("name") + "_block_message").html('<span class="' + b.errorMessageClass + ' help-block">' + n.valAttr("current-error") + "</span>")
                        } else {
                            m.append('<span class="' + b.errorMessageClass + ' help-block">' + n.valAttr("current-error") + "</span>")
                        }
                    }
                })
            }
            return false
        }
        a.formUtils.isValidatingEntireForm = false;
        return !a.formUtils.haltValidation
    };
    a.fn.restrictLength = function(b) {
        new a.formUtils.lengthRestriction(this, b);
        return this
    };
    a.fn.addSuggestions = function(c) {
        var b = false;
        this.find("input").each(function() {
            var d = a(this);
            b = a.split(d.attr("data-suggestions"));
            if (b.length > 0) {
                a.formUtils.suggest(d, b, c)
            }
        });
        return this
    };
    a.split = function(e, c, d) {
        if (typeof c != "function") {
            if (!e) {
                return[]
            }
            var b = [];
            a.each(e.split(c ? c : ","), function(f, g) {
                g = a.trim(g);
                if (g.length) {
                    b.push(g)
                }
            });
            return b
        } else {
            if (e) {
                if (!d) {
                    d = ","
                }
                a.each(e.split(d), function(f, g) {
                    g = a.trim(g);
                    if (g.length) {
                        return c(g, f)
                    }
                })
            }
        }
    };
    a.validate = function(b) {
        b = a.extend({form: "form", validateOnBlur: true, showHelpOnFocus: true, addSuggestions: true, modules: "", onModulesLoaded: null, language: false, onSuccess: false, onError: false, cancel: false}, b || {});
        a.split(b.form, function(d) {
            var c = a(d);
            c.bind("submit", function() {
                if (a.formUtils.isLoadingModules) {
                    setTimeout(function() {
                        c.trigger("submit")
                    }, 200);
                    return false
                }
                var f = a(this).validateForm(b.language, b);
                if (a("#action").val() == "delete") {
                    return true
                }
                if (f && typeof b.onSuccess == "function") {
                    var e = b.onSuccess(c);
                    if (e === false) {
                        return false
                    }
                } else {
                    if (!f && typeof b.onError == "function") {
                        b.onError(c);
                        return false
                    } else {
                        return f
                    }
                }
            });
            if (b.validateOnBlur) {
                c.validateOnBlur(b.language, b)
            }
            if (b.showHelpOnFocus) {
                c.showHelpOnFocus()
            }
            if (b.addSuggestions) {
                c.addSuggestions()
            }
        });
        if (b.modules != "") {
            if (typeof b.onModulesLoaded == "function") {
                a.formUtils.on("load", function() {
                    b.onModulesLoaded()
                })
            }
            a.formUtils.loadModules(b.modules)
        }
    };
    a.validationSetup = function(b) {
        if (typeof console != "undefined" && console.warn) {
            window.console.warn("Using deprecated function $.validationSetup, pls use $.validate instead")
        }
        a.validate(b)
    };
    a.formUtils = {defaultConfig: function() {
            return{ignore: [], errorElementClass: "error", borderColorOnError: "red", errorMessageClass: "form-error", validationRuleAttribute: "data-validation", validationErrorMsgAttribute: "data-validation-error-msg", errorMessagePosition: "element", scrollToTopOnError: true, dateFormat: "yyyy-mm-dd", addValidClassOnAll: false, decimalSeparator: "."}
        }, validators: {}, _events: {load: [], valid: [], invalid: []}, haltValidation: false, isValidatingEntireForm: false, addValidator: function(c) {
            var b = c.name.indexOf("validate_") === 0 ? c.name : "validate_" + c.name;
            if (c.validateOnKeyUp === undefined) {
                c.validateOnKeyUp = true
            }
            this.validators[b] = c
        }, on: function(b, c) {
            if (this._events[b] === undefined) {
                this._events[b] = []
            }
            this._events[b].push(c)
        }, trigger: function(b, d, c) {
            a.each(this._events[b] || [], function(e, f) {
                f(d, c)
            })
        }, isLoadingModules: false, loadModules: function(c, f, d) {
            if (d === undefined) {
                d = true
            }
            if (a.formUtils.isLoadingModules) {
                setTimeout(function() {
                    a.formUtils.loadModules(c, f, d)
                });
                return
            }
            var b = function(j, m) {
                var l = a.split(j), i = l.length, h = function() {
                    i--;
                    if (i == 0) {
                        a.formUtils.isLoadingModules = false;
                        if (d) {
                            a.formUtils.trigger("load", m)
                        }
                    }
                };
                if (i > 0) {
                    a.formUtils.isLoadingModules = true
                }
                var g = "?__=" + (new Date).getTime(), k = document.getElementsByTagName("head")[0] || document.getElementsByTagName("body")[0];
                a.each(l, function(o, p) {
                    p = a.trim(p);
                    if (p.length == 0) {
                        h()
                    } else {
                        var q = m + p + (p.substr(-3) == ".js" ? "" : ".js"), n = document.createElement("SCRIPT");
                        n.type = "text/javascript";
                        n.onload = h;
                        n.src = q + (q.substr(-7) == ".dev.js" ? g : "");
                        n.onreadystatechange = function() {
                            if (this.readyState == "complete") {
                                h()
                            }
                        };
                        k.appendChild(n)
                    }
                })
            };
            if (f) {
                b(c, f)
            } else {
                var e = function() {
                    var g = false;
                    a("script").each(function() {
                        if (this.src) {
                            var h = this.src.substr(this.src.lastIndexOf("/") + 1, this.src.length);
                            if (h.indexOf("jquery.form-validator.js") > -1 || h.indexOf("jquery.form-validator.min.js") > -1) {
                                g = this.src.substr(0, this.src.lastIndexOf("/")) + "/";
                                if (g == "/") {
                                    g = ""
                                }
                                return false
                            }
                        }
                    });
                    if (g !== false) {
                        b(c, g);
                        return true
                    }
                    return false
                };
                if (!e()) {
                    a(e)
                }
            }
        }, validateInput: function(m, e, c, n, f) {
            var j = a.trim(m.val() || ""), i = m.valAttr("optional"), g = false, l = false, b = false, k = m.valAttr("if-checked");
            if (k != null) {
                g = true;
                b = n.find('input[name="' + k + '"]');
                if (b.prop("checked")) {
                    l = true
                }
            }
            if (!j && i === "true" || g && !l) {
                return c.addValidClassOnAll ? true : null
            }
            var d = m.attr(c.validationRuleAttribute), h = true;
            if (!d) {
                return c.addValidClassOnAll ? true : null
            }
            a.split(d, function(q) {
                if (q.indexOf("validate_") !== 0) {
                    q = "validate_" + q
                }
                var o = a.formUtils.validators[q];
                if (o && typeof o.validatorFunction == "function") {
                    if (q == "validate_checkbox_group") {
                        m = a("[name='" + m.attr("name") + "']:eq(0)")
                    }
                    if (q == "validate_radio_group") {
                        m = a("[name='" + m.attr("name") + "']:eq(0)")
                    }
                    var p = true;
                    if (f != "keyup" || o.validateOnKeyUp) {
                        p = o.validatorFunction(j, m, c, e, n)
                    }
                    if (!p) {
                        h = m.attr(c.validationErrorMsgAttribute);
                        if (!h) {
                            h = e[o.errorMessageKey];
                            if (!h) {
                                h = o.errorMessage
                            }
                        }
                        return false
                    }
                } else {
                    console.warn('Using undefined validator "' + q + '"')
                }
            }, " ");
            if (typeof h == "string") {
                return h
            } else {
                return true
            }
        }, parseDate: function(c, b) {
            var d = b.replace(/[a-zA-Z]/gi, "").substring(0, 1), h = "^", k = b.split(d), e, j, g, i;
            a.each(k, function(m, l) {
                h += (m > 0 ? "\\" + d : "") + "(\\d{" + l.length + "})"
            });
            h += "$";
            e = c.match(new RegExp(h));
            if (e === null) {
                return false
            }
            var f = function(n, l, o) {
                for (var m = 0; m < l.length; m++) {
                    if (l[m].substring(0, 1) === n) {
                        return a.formUtils.parseDateInt(o[m + 1])
                    }
                }
                return -1
            };
            g = f("m", k, e);
            j = f("d", k, e);
            i = f("y", k, e);
            if (g === 2 && j > 28 && (i % 4 !== 0 || i % 100 === 0 && i % 400 !== 0) || g === 2 && j > 29 && (i % 4 === 0 || i % 100 !== 0 && i % 400 === 0) || g > 12 || g === 0) {
                return false
            }
            if (this.isShortMonth(g) && j > 30 || !this.isShortMonth(g) && j > 31 || j === 0) {
                return false
            }
            return[i, g, j]
        }, parseDateInt: function(b) {
            if (b.indexOf("0") === 0) {
                b = b.replace("0", "")
            }
            return parseInt(b, 10)
        }, isShortMonth: function(b) {
            return b % 2 === 0 && b < 7 || b % 2 !== 0 && b > 7
        }, lengthRestriction: function(e, c) {
            var d = parseInt(c.text(), 10), b = function() {
                var f = e.val().length;
                if (f > d) {
                    var g = e.scrollTop();
                    e.val(e.val().substring(0, d));
                    e.scrollTop(g)
                }
                c.text(d - f)
            };
            a(e).bind("keydown keyup keypress focus blur", b).bind("cut paste", function() {
                setTimeout(b, 100)
            });
            a(document).bind("ready", b)
        }, numericRangeCheck: function(e, b) {
            var c = a.split(b, "-");
            var d = parseInt(b.substr(3), 10);
            if (c.length == 2 && (e < parseInt(c[0], 10) || e > parseInt(c[1], 10))) {
                return["out", c[0], c[1]]
            } else {
                if (b.indexOf("min") === 0 && e < d) {
                    return["min", d]
                } else {
                    if (b.indexOf("max") === 0 && e > d) {
                        return["max", d]
                    } else {
                        return["ok"]
                    }
                }
            }
        }, _numSuggestionElements: 0, _selectedSuggestion: null, _previousTypedVal: null, suggest: function(c, b, f) {
            var d = {css: {maxHeight: "150px", background: "#FFF", lineHeight: "150%", textDecoration: "underline", overflowX: "hidden", overflowY: "auto", border: "#CCC solid 1px", borderTop: "none", cursor: "pointer"}, activeSuggestionCSS: {background: "#E9E9E9"}};
            if (f) {
                a.extend(d, f)
            }
            d.css.position = "absolute";
            d.css["z-index"] = 9999;
            c.attr("autocomplete", "off");
            this._numSuggestionElements++;
            var e = function(g) {
                var h = g.valAttr("suggestion-nr");
                a.formUtils._selectedSuggestion = null;
                a.formUtils._previousTypedVal = null;
                a(".jquery-form-suggestion-" + h).fadeOut("fast")
            };
            c.data("suggestions", b).valAttr("suggestion-nr", this._numSuggestionElements).bind("focus", function() {
                a(this).trigger("keyup");
                a.formUtils._selectedSuggestion = null
            }).bind("keyup", function() {
                var n = a(this), h = [], m = a.trim(n.val()).toLocaleLowerCase();
                if (m == a.formUtils._previousTypedVal) {
                    return
                } else {
                    a.formUtils._previousTypedVal = m
                }
                var g = false, k = n.valAttr("suggestion-nr"), j = a(".jquery-form-suggestion-" + k);
                j.scrollTop(0);
                if (m != "") {
                    var i = m.length > 2;
                    a.each(n.data("suggestions"), function(p, o) {
                        var q = o.toLocaleLowerCase();
                        if (q == m) {
                            h.push("<strong>" + o + "</strong>");
                            g = true;
                            return false
                        } else {
                            if (q.indexOf(m) === 0 || i && q.indexOf(m) > -1) {
                                h.push(o.replace(new RegExp(m, "gi"), "<strong>$&</strong>"))
                            }
                        }
                    })
                }
                if (g || h.length == 0 && j.length > 0) {
                    j.hide()
                } else {
                    if (h.length > 0 && j.length == 0) {
                        j = a("<div></div>").css(d.css).appendTo("body");
                        j.addClass("jquery-form-suggestions");
                        j.addClass("jquery-form-suggestion-" + k)
                    } else {
                        if (h.length > 0 && !j.is(":visible")) {
                            j.show()
                        }
                    }
                }
                if (h.length > 0 && m.length != h[0].length) {
                    var l = n.offset();
                    j.css({width: n.outerWidth(), left: l.left + "px", top: l.top + n.outerHeight() + "px"});
                    j.html("");
                    a.each(h, function(o, p) {
                        a("<div></div>").append(p).css({overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap", padding: "5px"}).addClass("form-suggest-element").appendTo(j).click(function() {
                            n.focus();
                            n.val(a(this).text());
                            e(n)
                        })
                    })
                }
            }).bind("keydown", function(n) {
                var g = n.keyCode ? n.keyCode : n.which, q, h, o = a(this);
                if (g == 13 && a.formUtils._selectedSuggestion !== null) {
                    q = o.valAttr("suggestion-nr");
                    h = a(".jquery-form-suggestion-" + q);
                    if (h.length > 0) {
                        var k = h.find("div").eq(a.formUtils._selectedSuggestion).text();
                        o.val(k);
                        e(o);
                        n.preventDefault()
                    }
                } else {
                    q = o.valAttr("suggestion-nr");
                    h = a(".jquery-form-suggestion-" + q);
                    var i = h.children();
                    if (i.length > 0 && a.inArray(g, [38, 40]) > -1) {
                        if (g == 38) {
                            if (a.formUtils._selectedSuggestion === null) {
                                a.formUtils._selectedSuggestion = i.length - 1
                            } else {
                                a.formUtils._selectedSuggestion--
                            }
                            if (a.formUtils._selectedSuggestion < 0) {
                                a.formUtils._selectedSuggestion = i.length - 1
                            }
                        } else {
                            if (g == 40) {
                                if (a.formUtils._selectedSuggestion === null) {
                                    a.formUtils._selectedSuggestion = 0
                                } else {
                                    a.formUtils._selectedSuggestion++
                                }
                                if (a.formUtils._selectedSuggestion > i.length - 1) {
                                    a.formUtils._selectedSuggestion = 0
                                }
                            }
                        }
                        var j = h.innerHeight(), p = h.scrollTop(), m = h.children().eq(0).outerHeight(), l = m * a.formUtils._selectedSuggestion;
                        if (l < p || l > p + j) {
                            h.scrollTop(l)
                        }
                        i.removeClass("active-suggestion").css("background", "none").eq(a.formUtils._selectedSuggestion).addClass("active-suggestion").css(d.activeSuggestionCSS);
                        n.preventDefault();
                        return false
                    }
                }
            }).bind("blur", function() {
                e(a(this))
            });
            return c
        }, LANG: {errorTitle: "Form submission failed!", requiredFields: "You have not answered all required fields", badTime: "You have not given a correct time", badEmail: "You have not given a correct e-mail address", badTelephone: "You have not given a correct phone number", badSecurityAnswer: "You have not given a correct answer to the security question", badDate: "You have not given a correct date", lengthBadStart: "You must give an answer between ", lengthBadEnd: " characters", lengthTooLongStart: "You have given an answer longer than ", lengthTooShortStart: "You have given an answer shorter than ", notConfirmed: "Values could not be confirmed", badDomain: "Incorrect domain value", badUrl: "The answer you gave was not a correct URL", badCustomVal: "You gave an incorrect answer", badInt: "The answer you gave was not a correct number", badSecurityNumber: "Your social security number was incorrect", badUKVatAnswer: "Incorrect UK VAT Number", badStrength: "The password isn't strong enough", badNumberOfSelectedOptionsStart: "You have to choose at least ", badNumberOfSelectedOptionsEnd: " answers", badAlphaNumeric: "The answer you gave must contain only alphanumeric characters ", badAlphaNumericExtra: " and ", wrongFileSize: "The file you are trying to upload is too large", wrongFileType: "The file you are trying to upload is of wrong type", groupCheckedRangeStart: "Please choose between ", groupCheckedTooFewStart: "Please choose at least ", groupCheckedTooManyStart: "Please choose a maximum of ", groupCheckedEnd: " item(s)"}};
    a.formUtils.addValidator({name: "email", validatorFunction: function(c) {
            if (c.length == 0) {
                return true
            }
            var b = c.split("@");
            if (b.length == 2) {
                return a.formUtils.validators.validate_domain.validatorFunction(b[1]) && !/[^a-zA-Z0-9_\+\.\-]/.test(b[0])
            }
            return false
        }, errorMessage: "", errorMessageKey: "badEmail"});
    a.formUtils.addValidator({name: "domain", validatorFunction: function(e, o) {
            var g = [".com", ".net", ".org", ".biz", ".coop", ".info", ".museum", ".name", ".pro", ".edu", ".gov", ".int", ".mil", ".ac", ".ad", ".ae", ".af", ".ag", ".ai", ".al", ".am", ".an", ".ao", ".aq", ".ar", ".as", ".at", ".au", ".aw", ".az", ".ba", ".bb", ".bd", ".be", ".bf", ".bg", ".bh", ".bi", ".bj", ".bm", ".bn", ".bo", ".br", ".bs", ".bt", ".bv", ".bw", ".by", ".bz", ".ca", ".cc", ".cd", ".cf", ".cg", ".ch", ".ci", ".ck", ".cl", ".cm", ".cn", ".co", ".cr", ".cu", ".cv", ".cx", ".cy", ".cz", ".de", ".dj", ".dk", ".dm", ".do", ".dz", ".ec", ".ee", ".eg", ".eh", ".er", ".es", ".et", ".fi", ".fj", ".fk", ".fm", ".fo", ".fr", ".ga", ".gd", ".ge", ".gf", ".gg", ".gh", ".gi", ".gl", ".gm", ".gn", ".gp", ".gq", ".gr", ".gs", ".gt", ".gu", ".gv", ".gy", ".hk", ".hm", ".hn", ".hr", ".ht", ".hu", ".id", ".ie", ".il", ".im", ".in", ".io", ".iq", ".ir", ".is", ".it", ".je", ".jm", ".jo", ".jp", ".ke", ".kg", ".kh", ".ki", ".km", ".kn", ".kp", ".kr", ".kw", ".ky", ".kz", ".la", ".lb", ".lc", ".li", ".lk", ".lr", ".ls", ".lt", ".lu", ".lv", ".ly", ".ma", ".mc", ".md", ".me", ".mg", ".mh", ".mk", ".ml", ".mm", ".mn", ".mo", ".mp", ".mq", ".mr", ".ms", ".mt", ".mu", ".mv", ".mw", ".mx", ".my", ".mz", ".na", ".nc", ".ne", ".nf", ".ng", ".ni", ".nl", ".no", ".np", ".nr", ".nu", ".nz", ".om", ".pa", ".pe", ".pf", ".pg", ".ph", ".pk", ".pl", ".pm", ".pn", ".pr", ".ps", ".pt", ".pw", ".py", ".qa", ".re", ".ro", ".rs", ".rw", ".ru", ".sa", ".sb", ".sc", ".sd", ".se", ".sg", ".sh", ".si", ".sj", ".sk", ".sl", ".sm", ".sn", ".so", ".sr", ".st", ".sv", ".sy", ".sz", ".tc", ".td", ".tf", ".tg", ".th", ".tj", ".tk", ".tm", ".tn", ".to", ".tp", ".tr", ".tt", ".tv", ".tw", ".tz", ".ua", ".ug", ".uk", ".um", ".us", ".uy", ".uz", ".va", ".vc", ".ve", ".vg", ".vi", ".vn", ".vu", ".ws", ".wf", ".ye", ".yt", ".za", ".zm", ".zw", ".mobi", ".xxx", ".asia"], m = ["co", "me", "ac", "gov", "judiciary", "ltd", "mod", "net", "nhs", "nic", "org", "parliament", "plc", "police", "sch", "bl", "british-library", "jet", "nls"], b = e.lastIndexOf("."), k = e.substring(0, b), d = e.substring(b, e.length), n = false;
            for (var l = 0; l < g.length; l++) {
                if (g[l] === d) {
                    if (d === ".uk") {
                        var c = e.split(".");
                        var f = c[c.length - 2];
                        for (var h = 0; h < m.length; h++) {
                            if (m[h] === f) {
                                n = true;
                                break
                            }
                        }
                        if (n) {
                            break
                        }
                    } else {
                        n = true;
                        break
                    }
                }
            }
            if (!n) {
                return false
            } else {
                if (b < 2 || b > 57) {
                    return false
                } else {
                    var p = k.substring(0, 1);
                    var q = k.substring(k.length - 1, k.length);
                    if (p === "-" || p === "." || q === "-" || q === ".") {
                        return false
                    }
                    if (k.split(".").length > 3 || k.split("..").length > 1) {
                        return false
                    }
                    if (k.replace(/[0-9a-z\.\-]/g, "") !== "") {
                        return false
                    }
                }
            }
            if (typeof o !== "undefined") {
                o.val(e)
            }
            return true
        }, errorMessage: "", errorMessageKey: "badDomain"});
    a.formUtils.addValidator({name: "required", validatorFunction: function(c, b) {
            if (b.attr("type") == "checkbox" || b.attr("type") == "radio") {
                return el.is(":checked")
            }
            return a.trim(c) !== ""
        }, errorMessage: "", errorMessageKey: "requiredFields"});
    a.formUtils.addValidator({name: "length", validatorFunction: function(c, k, d, b) {
            var f = k.valAttr("length"), i = k.attr("type");
            if (f == undefined) {
                var h = k.get(0).nodeName;
                alert('Please add attribute "data-validation-length" to ' + h + " named " + k.attr("name"));
                return true
            }
            var g = i == "file" && k.get(0).files !== undefined ? k.get(0).files.length : c.length, e = a.formUtils.numericRangeCheck(g, f), j;
            switch (e[0]) {
                case"out":
                    this.errorMessage = b.lengthBadStart + f + b.lengthBadEnd;
                    j = false;
                    break;
                case"min":
                    this.errorMessage = b.lengthTooShortStart + e[1] + b.lengthBadEnd;
                    j = false;
                    break;
                case"max":
                    this.errorMessage = b.lengthTooLongStart + e[1] + b.lengthBadEnd;
                    j = false;
                    break;
                default:
                    j = true
            }
            return j
        }, errorMessage: "", errorMessageKey: ""});
    a.formUtils.addValidator({name: "url", validatorFunction: function(b) {
            var e = /^(https|http|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|\[|\]|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
            if (e.test(b)) {
                var c = b.split("://")[1];
                var d = c.indexOf("/");
                if (d > -1) {
                    c = c.substr(0, d)
                }
                return a.formUtils.validators.validate_domain.validatorFunction(c)
            }
            return false
        }, errorMessage: "", errorMessageKey: "badUrl"});
    a.formUtils.addValidator({name: "number", validatorFunction: function(f, d, c) {
            if (f !== "") {
                var b = d.valAttr("allowing") || "", e = d.valAttr("decimal-separator") || c.decimalSeparator;
                if (b.indexOf("number") == -1) {
                    b += ",number"
                }
                if (b.indexOf("negative") > -1 && f.indexOf("-") === 0) {
                    f = f.substr(1)
                }
                if (b.indexOf("number") > -1 && f.replace(/[0-9]/g, "") === "") {
                    return true
                }
                if (b.indexOf("float") > -1 && f.match(new RegExp("^([0-9]+)\\" + e + "([0-9]+)$")) !== null) {
                    return true
                }
            }
            return false
        }, errorMessage: "", errorMessageKey: "badInt"});
    a.formUtils.addValidator({name: "alphanumeric", validatorFunction: function(c, j, d, f) {
            var i = "^([a-zA-Z0-9", h = "]+)$", b = j.attr("data-validation-allowing"), g = "";
            if (b) {
                g = i + b + h;
                var e = b.replace(/\\/g, "");
                if (e.indexOf(" ") > -1) {
                    e = e.replace(" ", "");
                    e += " and spaces "
                }
                this.errorMessage = f.badAlphaNumeric + f.badAlphaNumericExtra + e
            } else {
                g = i + h;
                this.errorMessage = f.badAlphaNumeric
            }
            return new RegExp(g).test(c)
        }, errorMessage: "", errorMessageKey: ""});
    a.formUtils.addValidator({name: "custom", validatorFunction: function(e, c, b) {
            var d = new RegExp(c.valAttr("regexp"));
            return d.test(e)
        }, errorMessage: "", errorMessageKey: "badCustomVal"});
    a.formUtils.addValidator({name: "date", validatorFunction: function(d, e, c) {
            var b = "yyyy-mm-dd";
            if (e.valAttr("format")) {
                b = e.valAttr("format")
            } else {
                if (c.dateFormat) {
                    b = c.dateFormat
                }
            }
            return a.formUtils.parseDate(d, b) !== false
        }, errorMessage: "", errorMessageKey: "badDate"});
    a.formUtils.addValidator({name: "checkbox_group", validatorFunction: function(c, j, d, b, l) {
            var k = true;
            var h = j.attr("name");
            var f = a("input[type=checkbox][name^='" + h + "']:checked", l).length;
            var e = j.valAttr("qty");
            if (e == undefined) {
                var g = j.get(0).nodeName;
                alert('Attribute "data-validation-qty" is missing from ' + g + " named " + j.attr("name"))
            }
            var i = a.formUtils.numericRangeCheck(f, e);
            switch (i[0]) {
                case"out":
                    this.errorMessage = b.groupCheckedRangeStart + e + b.groupCheckedEnd;
                    k = false;
                    break;
                case"min":
                    this.errorMessage = b.groupCheckedTooFewStart + i[1] + b.groupCheckedEnd;
                    k = false;
                    break;
                case"max":
                    this.errorMessage = b.groupCheckedTooManyStart + i[1] + b.groupCheckedEnd;
                    k = false;
                    break;
                default:
                    k = true
            }
            return k
        }});
    a.formUtils.addValidator({name: "radio_group", validatorFunction: function(i, g, d, h, c) {
            var f = true;
            var b = g.attr("name");
            var e = a("input[type=radio][name^='" + b + "']:checked", c).length;
            if (e != 1) {
                this.errorMessage = h.requiredFields;
                f = false
            }
            return f
        }});
    a.formUtils.addValidator({name: "phone_number", validatorFunction: function(e, d, c, f, b) {
            if (e.length == 0) {
                return true
            }
            if (/^0(\d)[-  .]?(\d\d)[-  .]?(\d\d)[-  .]?(\d\d)[-  .]?(\d\d)$/.test(e)) {
                e = e.replace(/^0(\d)[-  .]?(\d\d)[-  .]?(\d\d)[-  .]?(\d\d)[-  .]?(\d\d)$/, "0$1.$2.$3.$4.$5");
                d.val(e);
                return true
            }
            if (/^\+33[-  .]?(\d)[-  .]?(\d\d)[-  .]?(\d\d)[-  .]?(\d\d)[-  .]?(\d\d)$/.test(e)) {
                e = e.replace(/^\+33[-  .]?(\d)[-  .]?(\d\d)[-  .]?(\d\d)[-  .]?(\d\d)[-  .]?(\d\d)$/, "0$1.$2.$3.$4.$5");
                d.val(e);
                return true
            }
            return false
        }, errorMessage: "Veuillez rentrer un N° de téléphone valide", errorMessageKey: "badEvenNumber"});
    a.FrenchLanguage = {errorTitle: "la soumission de formulaire a échoué! ", requiredFields: "Ce champ est obligatoire", BADTIME: "Vous n'avez pas renseigné une date valide ", badEmail: "Vous n'avez pas renseigné une adresse email correcte", badTelephone: "le numéro de téléphone n'est pas correct", badSecurityAnswer: "Vous n'avez pas renseigné une réponse correcte à la question de sécurité ", badDate: "Vous n'avez pas renseigné une date correcte", tooLongStart: "Vous avez renseigné une réponse de plus de ", tooLongEnd: " caractères ", tooShortStart: "Vous avez renseigné une réponse de moins de ", tooShortEnd: " caractères ", badLength: "Vous devez donner une réponse entre ", notConfirmed: "Les valeurs ne pouvaient être confirmées", badDomain: "Valeur de domaine incorrect", BADURL: "La réponse que vous avez renseignée n'était pas une URL correcte", badCustomVal: "Vous avez renseigné une mauvaise réponse", badInt: "La réponse que vous avez renseignée n'est pas un nombre correct", badSecurityNumber: "Votre numéro de sécurité sociale était incorrect", badUKVatAnswer: "Incorrect Royaume-Uni Numéro de TVA ", badStrength: "Le mot de passe n'est assez fort", badNumberOfSelectedOptionsStart: "Vous devez choisir au moins ", badNumberOfSelectedOptionsEnd: "réponses ", badAlphaNumeric: "La réponse que vous avez renseignée ne doit contenir que des caractères alphanumériques", badAlphaNumericExtra: " et", wrongFileSize: "Le fichier que vous essayez de transmettre est trop grand ", wrongFileType: "Le fichier que vous essayez de transmettre est d'un type incorrect "}
})(jQuery);